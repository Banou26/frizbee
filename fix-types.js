#!/usr/bin/env node

// Post-build script to fix TypeScript definitions generated by wasm-pack
// The auto-generated types use 'any' for complex types, this script replaces them with proper types

const fs = require('fs');
const path = require('path');

const dtsPath = path.join(__dirname, 'pkg', 'frizbee.d.ts');

// Read the generated .d.ts file
let content = fs.readFileSync(dtsPath, 'utf8');

// Add interface definitions at the top after the first comment block
const interfaceDefinitions = `
export interface Scoring {
    match_score: number;
    mismatch_penalty: number;
    gap_open_penalty: number;
    gap_extend_penalty: number;
    prefix_bonus: number;
    offset_prefix_bonus: number;
    capitalization_bonus: number;
    matching_case_bonus: number;
    exact_match_bonus: number;
    delimiters: string;
    delimiter_bonus: number;
}

export interface Config {
    prefilter: boolean;
    max_typos: number | null;
    sort: boolean;
    scoring: Scoring;
}

export interface Match {
    score: number;
    index: number;
    exact: boolean;
}

export interface MatchIndices {
    score: number;
    indices: number[];
    exact: boolean;
}

export interface ComparisonResult {
    needle: string;
    haystack: string;
    needle_index: number;
    haystack_index: number;
    score: number;
    exact: boolean;
}
`;

// Insert interfaces after the header comments
const headerEnd = content.indexOf('*/') + 2;
content = content.slice(0, headerEnd) + interfaceDefinitions + content.slice(headerEnd);

// Fix function return types
content = content.replace(
    /export function create_default_config\(\): any;/,
    'export function create_default_config(): Config;'
);

content = content.replace(
    /export function create_default_scoring\(\): any;/,
    'export function create_default_scoring(): Scoring;'
);

content = content.replace(
    /export function create_custom_config\(prefilter: boolean, max_typos: number \| undefined, sort: boolean, scoring_js: any\): any;/,
    'export function create_custom_config(prefilter: boolean, max_typos: number | undefined, sort: boolean, scoring_js?: Scoring): Config;'
);

content = content.replace(
    /export function create_custom_scoring\(([^)]+)\): any;/,
    'export function create_custom_scoring($1): Scoring;'
);

// Fix WasmMatcher method types - handle various formats
content = content.replace(
    /matchList\(needle: string, haystacks: (?:string\[\]|\(string\)\[\]), config_js: any\): any;/,
    'matchList(needle: string, haystacks: string[], config_js?: Config): Match[];'
);

content = content.replace(
    /matchIndices\(needle: string, haystack: string, config_js: any\): any;/,
    'matchIndices(needle: string, haystack: string, config_js?: Config): MatchIndices | null;'
);

content = content.replace(
    /compareAll\(items: (?:string\[\]|\(string\)\[\]), config_js: any, min_score\?: (?:number \| undefined|number \| null)\): any;/,
    'compareAll(items: string[], config_js?: Config, min_score?: number): ComparisonResult[];'
);

// Also fix create_custom_config
content = content.replace(
    /export function create_custom_config\(prefilter: boolean, max_typos: (?:number \| null \| undefined|number \| undefined), sort: boolean, scoring_js: any\): any;/,
    'export function create_custom_config(prefilter: boolean, max_typos: number | null | undefined, sort: boolean, scoring_js?: Scoring): Config;'
);

// Write the fixed content back
fs.writeFileSync(dtsPath, content, 'utf8');

console.log('‚úÖ TypeScript definitions fixed successfully!');
console.log(`üìù Updated: ${dtsPath}`);
